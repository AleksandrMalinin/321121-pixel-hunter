{"version":3,"file":"game-first-view.js","sources":["../util.js","abstract-view.js","../constants.js","game-first-view.js"],"sourcesContent":["export const getElementFromTemplate = (markup) => {\n  let domElement = document.createElement(`div`);\n  domElement.innerHTML = markup;\n  return domElement;\n};\n\nexport const showErrorMessage = (message) => {\n  const template = document.createElement(`div`);\n  template.textContent = message;\n\n  const styles = [\n    `position: fixed`,\n    `top: 25%`,\n    `left: 50%`,\n    `z-index: 100`,\n    `width: 800px`,\n    `padding: 20px`,\n    `color: #fff`,\n    `text-align: center`,\n    `transform: translate(-50%, -50%)`,\n    `border-radius: 2px`,\n    `background-color: #DC143C`\n  ];\n\n  template.style.cssText = styles.join(`;`);\n  document.body.appendChild(template);\n};\n","import {getElementFromTemplate} from \"../util\";\n\nclass AbstractView {\n  constructor() {\n    if (new.target === AbstractView) {\n      throw new Error(`Can not create example of AbstractView, only the new one class`);\n    }\n  }\n\n  get template() {\n    throw new Error(`Template is required`);\n  }\n\n  get element() {\n    if (this._element) {\n      return this._element;\n    }\n    this._element = this.render();\n    this.bind(this._element);\n    return this._element;\n  }\n\n  render() {\n    return getElementFromTemplate(this.template);\n  }\n\n  bind() {\n  }\n}\n\nexport default AbstractView;\n","const constants = {\n  MAX_ANSWERS_COUNT: 10,\n  MAX_WRONG_ANSWERS: 3,\n  CORRECT_ANSWER: 100,\n  ADDITIONAL_POINTS: 50,\n  LOWER_TIME_LIMIT: 10,\n  HIGHER_TIME_LIMIT: 20,\n  CHECKED_RADIO_COUNT: 2,\n  MIN_NAME_LENGTH: 2,\n  INITIAL_STATE: Object.freeze({\n    lives: 3,\n    time: 30,\n    win: false,\n    level: 0\n  }),\n  SERVER_URL: `https://es.dump.academy/pixel-hunter`,\n  MAX_RESULTS_NUMBER: 3,\n  LAST_SEC: 5,\n  PAUSE_TIME: 3000\n};\n\nexport default constants;\n","import AbstractView from \"./abstract-view\";\nimport constants from \"../constants\";\n\nclass GameFirstView extends AbstractView {\n  constructor(level) {\n    super();\n    this.question = level.question;\n    this.answers = level.answers;\n  }\n\n  get template() {\n    return `\n    <div class=\"game\">\n      <p class=\"game__task\">${this.question}</p>\n      <form class=\"game__content\">\n        <div class=\"game__option\">\n          <img src=\"${this.answers[0].image.url}\" alt=\"Option 1\" width=\"468\" height=\"458\">\n          <label class=\"game__answer game__answer--photo\">\n            <input name=\"question1\" type=\"radio\" value=\"photo\">\n            <span>Фото</span>\n          </label>\n          <label class=\"game__answer game__answer--paint\">\n            <input name=\"question1\" type=\"radio\" value=\"painting\">\n            <span>Рисунок</span>\n          </label>\n        </div>\n        <div class=\"game__option\">\n          <img src=\"${this.answers[1].image.url}\" alt=\"Option 2\" width=\"468\" height=\"458\">\n          <label class=\"game__answer  game__answer--photo\">\n            <input name=\"question2\" type=\"radio\" value=\"photo\">\n            <span>Фото</span>\n          </label>\n          <label class=\"game__answer  game__answer--paint\">\n            <input name=\"question2\" type=\"radio\" value=\"painting\">\n            <span>Рисунок</span>\n          </label>\n        </div>\n      </form>\n    </div>`;\n  }\n\n  onAnswer() {\n  }\n\n  bind() {\n    const form = this.element.querySelector(`.game__content`);\n    const radio = form.querySelectorAll(`[type=radio]`);\n\n    form.addEventListener(`change`, () => {\n      const checked = [];\n\n      for (const item of radio) {\n        // запись чекнутого элемента в массив\n        if (item.checked) {\n          checked.push(item);\n        }\n      }\n\n      if (checked.length === constants.CHECKED_RADIO_COUNT) {\n        const userAnswer = checked[0].value === this.answers[0].type && checked[1].value === this.answers[1].type;\n        this.onAnswer(userAnswer);\n        form.reset();\n      }\n    });\n  }\n}\n\nexport default GameFirstView;\n"],"names":["getElementFromTemplate","markup","domElement","document","createElement","innerHTML","AbstractView","new","target","Error","template","_element","render","bind","constants","Object","freeze","GameFirstView","level","question","answers","form","element","querySelector","radio","querySelectorAll","addEventListener","checked","item","push","length","CHECKED_RADIO_COUNT","userAnswer","value","type","onAnswer","reset","image","url"],"mappings":";;;AAAO,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,MAAD,EAAY;MAC5CC,aAAaC,SAASC,aAAT,OAAjB;aACWC,SAAX,GAAuBJ,MAAvB;SACOC,UAAP;CAHK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICEDI;0BACU;;;QACRC,IAAIC,MAAJ,KAAeF,YAAnB,EAAiC;YACzB,IAAIG,KAAJ,kEAAN;;;;;;6BAiBK;aACAT,uBAAuB,KAAKU,QAA5B,CAAP;;;;2BAGK;;;2BAjBQ;YACP,IAAID,KAAJ,wBAAN;;;;2BAGY;UACR,KAAKE,QAAT,EAAmB;eACV,KAAKA,QAAZ;;WAEGA,QAAL,GAAgB,KAAKC,MAAL,EAAhB;WACKC,IAAL,CAAU,KAAKF,QAAf;aACO,KAAKA,QAAZ;;;;;;ACnBJ,IAAMG,YAAY;qBACG,EADH;qBAEG,CAFH;kBAGA,GAHA;qBAIG,EAJH;oBAKE,EALF;qBAMG,EANH;uBAOK,CAPL;mBAQC,CARD;iBASDC,OAAOC,MAAP,CAAc;WACpB,CADoB;UAErB,EAFqB;SAGtB,KAHsB;WAIpB;GAJM,CATC;oDAAA;sBAgBI,CAhBJ;YAiBN,CAjBM;cAkBJ;CAlBd;;ICGMC;;;yBACQC,KAAZ,EAAmB;;;;;UAEZC,QAAL,GAAgBD,MAAMC,QAAtB;UACKC,OAAL,GAAeF,MAAME,OAArB;;;;;;+BAkCS;;;2BAGJ;;;UACCC,OAAO,KAAKC,OAAL,CAAaC,aAAb,kBAAb;UACMC,QAAQH,KAAKI,gBAAL,gBAAd;;WAEKC,gBAAL,WAAgC,YAAM;YAC9BC,UAAU,EAAhB;;;;;;;+BAEmBH,KAAnB,8HAA0B;gBAAfI,IAAe;;;gBAEpBA,KAAKD,OAAT,EAAkB;sBACRE,IAAR,CAAaD,IAAb;;;;;;;;;;;;;;;;;;YAIAD,QAAQG,MAAR,KAAmBhB,UAAUiB,mBAAjC,EAAsD;cAC9CC,aAAaL,QAAQ,CAAR,EAAWM,KAAX,KAAqB,OAAKb,OAAL,CAAa,CAAb,EAAgBc,IAArC,IAA6CP,QAAQ,CAAR,EAAWM,KAAX,KAAqB,OAAKb,OAAL,CAAa,CAAb,EAAgBc,IAArG;iBACKC,QAAL,CAAcH,UAAd;eACKI,KAAL;;OAbJ;;;;2BAtCa;4EAGa,KAAKjB,QAF/B,+GAKkB,KAAKC,OAAL,CAAa,CAAb,EAAgBiB,KAAhB,CAAsBC,GALxC,mjBAgBkB,KAAKlB,OAAL,CAAa,CAAb,EAAgBiB,KAAhB,CAAsBC,GAhBxC;;;;EARwBhC;;;;;;;;"}